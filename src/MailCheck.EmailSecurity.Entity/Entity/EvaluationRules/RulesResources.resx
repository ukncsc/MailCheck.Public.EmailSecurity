<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="NoMatchingMx" xml:space="preserve">
    <value>None of the MX hosts listed in your policy file match the hosts found in your DNS MX records.</value>
  </data>
  <data name="NoMatchingMxMarkdown" xml:space="preserve">
    <value>You are at risk of not receiving email as the inbound sending SMTP servers will only trust the MX hosts listed in your MTA-STS policy file.

Hosts found in your MX DNS records: {0}

Hosts found in your MTA-STS policy file: {1}

Please ensure that hosts denoted with mx: in your policy file match what was found in your MX DNS records.</value>
  </data>
  <data name="SomeMatchingMx" xml:space="preserve">
    <value>Not all of the MX hosts listed in your policy file match the hosts found in your DNS MX records</value>
  </data>
  <data name="SomeMatchingMxMarkdown" xml:space="preserve">
    <value>You are at risk of not receiving email as the inbound sending SMTP servers will only trust the MX hosts listed in your MTA-STS policy file.

Hosts found in your MX DNS records: {0}

Hosts found in your MTA-STS policy file: {1}

Please ensure that hosts denoted with mx: in your policy file match what was found in your MX DNS records.</value>
  </data>
  <data name="TestingSomeError" xml:space="preserve">
    <value>One or more of your mail servers listed in your MTA-STS policy does not meet the minimum standard by supporting TLS 1.2 and presenting a valid certificate.</value>
  </data>
  <data name="TestingSomeErrorMarkdown" xml:space="preserve">
    <value>One or more of your mail servers listed in your MTA-STS policy does not meet the minimum standard by supporting TLS 1.2 and presenting a valid certificate. Fix this before moving to enforce.</value>
  </data>
  <data name="TestingNoneError" xml:space="preserve">
    <value>None of your mail servers listed in your MTA-STS policy meet the minimum standard by supporting TLS 1.2 and presenting a valid certificate.</value>
  </data>
  <data name="TestingNoneErrorMarkdown" xml:space="preserve">
    <value>None of your mail servers listed in your MTA-STS policy meet the minimum standard by supporting TLS 1.2 and presenting a valid certificate. Do not change your policy to enforce mode otherwise emails will be lost.</value>
  </data>
  <data name="EnforceSomeError" xml:space="preserve">
    <value>One of your mail servers listed in your MTA-STS policy does not meet the minimum standard by supporting TLS 1.2 and presenting a valid certificate.</value>
  </data>
  <data name="EnforceSomeErrorMarkdown" xml:space="preserve">
    <value>One of your mail servers listed in your MTA-STS policy does not meet the minimum standard by supporting TLS 1.2 and presenting a valid certificate. You should fix this as soon as possible.</value>
  </data>
  <data name="EnforceNoneError" xml:space="preserve">
    <value>You will be losing incoming emails: None of the mail servers listed in your MTA-STS policy meet the minimum standard by supporting TLS 1.2 and presenting a valid certificate.</value>
  </data>
  <data name="EnforceNoneErrorMarkdown" xml:space="preserve">
    <value>You will be losing incoming emails: None of the mail servers listed in your MTA-STS policy meet the minimum standard by supporting TLS 1.2 and presenting a valid certificate. If the problem can't be solved quickly, consider changing your policy back to testing.</value>
  </data>
  <data name="GoToEnforce" xml:space="preserve">
    <value>You are ready to change your policy to "enforce".</value>
  </data>
  <data name="GoToEnforceMarkdown" xml:space="preserve">
    <value>You have a correctly configured MTA-STS policy and all mail servers listed are presenting good certificates and support TLS 1.2. You are ready to change your policy to "enforce" in order to protect inbound emails.</value>
  </data>
  <data name="NoMxAndNoMtaSts" xml:space="preserve">
    <value>No MTA-STS configured, but no action required as we did not detect a mail host for this domain (no MX record).</value>
  </data>
  <data name="NoMtsStsError" xml:space="preserve">
    <value>MTA-STS not configured. TLS email encryption is vulnerable to downgrade attacks. First step: set up an MTA-STS ‘testing’ policy.</value>
  </data>
  <data name="NoMtsStsErrorMarkdown" xml:space="preserve">
    <value>Mail Transfer Agent Strict Transport Security (MTA-STS) is a protocol that allows a domain to advertise the capability to receive emails using Transport Layer Security (TLS) 1.2 or higher. This then allows a sending email service to safely enforce encryption, without the risk of losing emails.
[Further information about MTA-STS](https://www.ncsc.gov.uk/collection/email-security-and-anti-spoofing/using-mta-sts-to-protect-the-privacy-of-your-emails)</value>
  </data>
</root>